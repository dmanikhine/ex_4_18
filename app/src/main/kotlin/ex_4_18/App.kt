/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ex_4_18

import java.math.BigInteger

fun <T> iterate(seed: T, f: (T) -> T, n: Int): List<T> {
    tailrec fun iterate_(acc: List<T>, seed: T): List<T> =
            if (acc.size <n)
                iterate_(acc + seed, f(seed))
            else
                acc
    return iterate_(listOf(), seed)
}

fun <T> List<T>.head(): T =
        if (this.isEmpty())
            throw IllegalArgumentException("head called on empty list")
        else
            this[0]

fun <T> List<T>.tail(): List<T> =
        if (this.isEmpty())
            throw IllegalArgumentException("tail called on empty list")
        else
            this.drop(1)


fun <T, U> foldLeft(list: List<T>, z: U, f: (U, T) -> U): U {
    tailrec fun foldLeft(list: List<T>, acc: U): U =
            if (list.isEmpty())
                acc
            else
                foldLeft(list.tail(), f(acc, list.head()))
    return foldLeft(list, z)
}

fun <T> makeString(list: List<T>, separator: String): String =
    when {
        list.isEmpty() -> ""
		list.tail().isEmpty() -> list.head().toString()
        else -> list.head().toString() + foldLeft(list.tail(), "") { x, y -> x + separator + y }
    }


fun <T, U> map(list: List<T>, f: (T) -> U): List<U> =
        foldLeft(list, listOf()) { acc, elem -> acc + f(elem)}
		
fun fiboCorecursive(number: Int): String {
    val seed = Pair(BigInteger.ZERO, BigInteger.ONE)
    val f = { x: Pair<BigInteger, BigInteger> -> Pair(x.second, x.first + x.second) }
    val listOfPairs = iterate(seed, f, number + 1)
    val list = map(listOfPairs) { p -> p.first }
    return makeString(list, ", ")
}		


class App {
    val greeting: String
        get() {
            return "package ex_4_18"
        }
}

fun main() {
    println(App().greeting)
	println(fiboCorecursive(20))
	
}
